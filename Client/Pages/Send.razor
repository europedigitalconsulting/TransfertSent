@page "/sent"
@inject Microsoft.Extensions.Localization.IStringLocalizer<Send> Loc
@namespace Cryptocoin.Client.Pages

<div class="main-content">
    <section class="section">
        <div class="section-header">
            <h1>@Loc["TitlePage"]</h1>
            <div class="section-header-breadcrumb">
                <div class="breadcrumb-item active"><a href="#">@Loc["Home"]</a></div>
                <div class="breadcrumb-item"><a href="#">@Loc["Wallet"]</a></div>
                <div class="breadcrumb-item">@Loc["Send"]</div>
            </div>
        </div>
        <div class="section-body">
            <TransferSentContainer @ref="container"  DescComponent="@Loc["DescComponent"]">

                <TypeTransferMethod Container="container" Name="TypeFriend" Title="@Loc["LabelSelectTypeFriend"]" Description="@Loc["TxtDescTypeFriend"]">
                    <TransferTypeFriend @ref="TransferTypeFriend" ListContact="@ListContact"
                                        ClickCancel="ClickCancelHandler"
                                        TransferTypeFriendPanelTitle=@Loc["TransferTypeFriendPanelTitle"]
                                        TxtTransferInProgress=@Loc["TxtTransferInProgress"]
                                        LabelNumberOfTokensToSend=@Loc["LabelNumberOfTokensToSend"]
                                        BtnSelectSender=@Loc["BtnSelectSender"]
                                        BtnCancel=@Loc["BtnCancel"]
                                        BtnValid=@Loc["BtnValid"]
                                        BtnSearch=@Loc["BtnSearch"]
                                        ContactListPanelTitle=@Loc["ContactListPanelTitle"]
                                        BtnConfirmTransfer=@Loc["BtnConfirmTransfer"]
                                        TxtYouHaveSelected=@Loc["TxtYouHaveSelected"]
                                        TxtAmountToTokens=@Loc["TxtAmountToTokens"]
                                        BtnReturnDashboard=@Loc["BtnReturnDashboard"]
                                        PathApiValidTransfer="/api/TransferSent/ValidTransferFriend"
                                        TxtSelectContact=@Loc["TxtSelectContact"]
                                        AmountInStock=5000>
                    </TransferTypeFriend>
                </TypeTransferMethod>
                <TypeTransferMethod Container="container" Name="TypeUser" Title="@Loc["LabelSelectTypeUser"]" Description="@Loc["TxtDescTypeUser"]">
                    <TransferTypeUser @ref="TransferTypeUser" TransferTypeUserPanelTitle=@Loc["TransferTypeUserPanelTitle"]
                                      LabelNumberOfTokensToSend=@Loc["LabelNumberOfTokensToSend"]
                                      BtnCancel=@Loc["BtnCancel"]
                                      BtnWaitingForPayment=@Loc["BtnWaitingForPayment"]
                                      WidthQrCode=200
                                      HeightQrCode=200
                                      ClickCancel="ClickCancelHandler"
                                      AmountInStock=5000
                                      TxtAwaitingPayment=@Loc["TxtAwaitingPayment"]
                                      PathApiInitQrCode=/api/QrCodeGenerator/GenerateForTransfer/
                                      TxtGenerateQrcode=@Loc["TxtGenerateQrcode"]>
                    </TransferTypeUser>
                </TypeTransferMethod>
                <TypeTransferMethod Container="container" Name="TypePhysical" Title="@Loc["LabelSelectTypePhysical"]" Description="@Loc["TxtDescTypePhysical"]">
                    <TransferTypePhysical @ref="TransferTypePhysical" ListPays="ListPays"
                                          ClickCancel="ClickCancelHandler"
                                          TransferTypePhysicalPanelTitle=@Loc["TransferTypePhysicalPanelTitle"]
                                          BtnCancel=@Loc["BtnCancel"]
                                          BtnSend=@Loc["BtnSend"]
                                          BtnConfirmSend=@Loc["BtnConfirmSend"]
                                          TxtInviteUseApplication=@Loc["TxtInviteUseApplication"]
                                          BtnReturnDashboard=@Loc["BtnReturnDashboard"]
                                          TxtPlaceholderLastnameSender=@Loc["TxtPlaceholderLastnameSender"]
                                          TxtPlaceholderFirstnameSender=@Loc["TxtPlaceholderFirstnameSender"]
                                          TxtPlaceholderMailSender=@Loc["@TxtPlaceholderMailSender"]
                                          TxtRefDestinationGTW=@Loc["TxtRefDestinationGTW"]
                                          TxtCountryNotDestinationList=@Loc["TxtCountryNotDestinationList"]
                                          TxtDescFormTransferPhysical=@Loc["TxtDescFormTransferPhysical"]
                                          TxtGenerateCodeRef=@Loc["TxtGenerateCodeRef"]
                                          PathApiGenerateRefCode="/api/TransferSent/ValidTransferPhysical"
                                          PathApiSendEmailInviteUser="/api/TransferSent/InviteUser/"
                                          AmountInStock=4000>
                    </TransferTypePhysical>
                </TypeTransferMethod>
            </TransferSentContainer>
        </div>
    </section>
</div>
@code{
    private TransferSentContainer container;
    private TransferTypeFriend TransferTypeFriend;
    private TransferTypeUser TransferTypeUser;
    private TransferTypePhysical TransferTypePhysical;
    protected List<Contact> ListContact { get; set; } = new List<Contact>();
    protected List<SelectListItem> ListPays { get; set; } = new List<SelectListItem>();

    protected void ClickCancelHandler(bool IsCancel)
    {
        if (IsCancel)
        {
            container.SetActivateTypeTransfer(null);
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        GetListContact();

        ListPays.Add(new SelectListItem { Value = "1", Text = "France" });
        ListPays.Add(new SelectListItem { Value = "2", Text = "Colombie" });
        ListPays.Add(new SelectListItem { Value = "3", Text = "Liban" });
        ListPays.Add(new SelectListItem { Value = "4", Text = "Chine" });
    }

    private void GetListContact()
    {
        for (int i = 0; i < 25; i++)
        {
            ListContact.Add(new Contact { DisplayName = i + "User Test" + i, Email = i + "@test.com", Id = i });
        }
    }
}
