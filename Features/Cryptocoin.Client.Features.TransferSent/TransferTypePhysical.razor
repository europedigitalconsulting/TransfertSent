@namespace Cryptocoin.Client.Feature.Transfer.Sent
@code{
    [Parameter]
    public string TransferTypePhysicalPanelTitle { get; set; }
    [Parameter]
    public string BtnCancel { get; set; }
    [Parameter]
    public string BtnSend { get; set; }
    [Parameter]
    public string BtnConfirmSend { get; set; }
    [Parameter]
    public string TxtInviteUseApplication { get; set; }
    [Parameter]
    public string BtnReturnDashboard { get; set; }
    [Parameter]
    public string TxtPlaceholderNameSender { get; set; }
    [Parameter]
    public string TxtPlaceholderMailSender { get; set; }
    [Parameter]
    public string TxtRefDestinationGTW { get; set; }
    [Parameter]
    public string TxtCountryNotDestinationList { get; set; }
    [Parameter]
    public string TxtDescFormTransferPhysical { get; set; }
    [Parameter]
    public string TxtGenerateCodeRef { get; set; }
    [Parameter]
    public int AmountInStock { get; set; }
    [Parameter]
    public string PathApiGenerateRefCode { get; set; }
    [Parameter]
    public string PathApiSendEmailInviteUser { get; set; }
}

<div class="card-header">
    <h4>
        @TransferTypePhysicalPanelTitle
    </h4>
</div>
<div class="card-body">
    @if (Etape == 1)
    {
        <p>
            @TxtDescFormTransferPhysical
        </p>
        <EditForm Model="@TransferSentViewModel" OnValidSubmit="StepConfirm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group ">
                <input class="form-control mb-3 col-lg-12 " type="number" min="10" max="@AmountInStock" step="10" @bind="@this.Amount" @bind:event="oninput" />

                <select @onchange="SelectPays" class="form-control col-lg-12 " aria-describedby="paysHelp">
                    <option value="0">...</option>
                    @foreach (var item in ListPays)
                    {
                        <option value="@item.Value">@item.Text</option>
                    }
                </select>
                <small id="paysHelp" class="mb-3 form-text text-muted">
                    @TxtCountryNotDestinationList
                </small>
                <input class="form-control mb-3 col-lg-12 " @bind-value="@TransferSentViewModel.SenderName" type="text" placeholder="@TxtPlaceholderNameSender" />
                <input class="form-control mb-3 col-lg-12 " @bind-value="@TransferSentViewModel.SenderEmail" type="text" placeholder="@TxtPlaceholderMailSender" />
                <br />
                <button type="submit" class="btn btn-primary col-lg-4">@BtnSend</button>
                <button @onclick="(() => ClickCancel.InvokeAsync(true))" class="btn btn-danger">@BtnCancel</button>
            </div>
        </EditForm>
    }
    else if (Etape == 2 || Etape == 3)
    {
        <p><strong>Vous avez demandé à envoyer à une personne physique</strong></p>
        <ul>
            <li>@Amount</li>
            <li>@ListPays.FirstOrDefault(x => x.Value == TransferSentViewModel.IdPays.ToString())?.Text</li>
            <li>@TransferSentViewModel.SenderName</li>
            <li>@TransferSentViewModel.SenderEmail</li>
        </ul>
        @if (Etape == 2)
        {
            <button @onclick="StepValidation" class="btn btn-primary">@BtnConfirmSend</button>
            <button @onclick="(() => ClickCancel.InvokeAsync(true))" class="btn btn-danger">@BtnCancel</button>
        }


        @if (Loading)
        {
            <p class="mt-3">@TxtGenerateCodeRef </p>
            <Loading_Component Loading="Loading"></Loading_Component>
        }
        else if (Etape == 3 && !Loading)
        {
            <p>
                @TxtRefDestinationGTW<br />
                <strong>@CodeRef</strong>
            </p>
            <button @onclick="InviteUser" class="btn btn-primary col-lg-5 mb-1">
                @TxtInviteUseApplication
            </button>
            <a href="/" class="btn btn-primary col-lg-5">
                @BtnReturnDashboard
            </a>
        }

    }
</div>