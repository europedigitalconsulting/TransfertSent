@namespace Cryptocoin.Client.Feature.Transfer.Sent
@code{
    [Parameter]
    public string TransferTypeFriendPanelTitle { get; set; }
    [Parameter]
    public EventCallback<bool> ClickCancel { get; set; }
    [Parameter]
    public IReadOnlyList<Contact> ListContact { get; set; }
    [Parameter]
    public string TxtTransferInProgress { get; set; }
    [Parameter]
    public string TxtSelectContact { get; set; }
    [Parameter]
    public string LabelNumberOfTokensToSend { get; set; }
    [Parameter]
    public string BtnSelectSender { get; set; }
    [Parameter]
    public string BtnCancel { get; set; }
    [Parameter]
    public string BtnValid { get; set; }
    [Parameter]
    public string BtnConfirmTransfer { get; set; }
    [Parameter]
    public string BtnReturnDashboard { get; set; }
    [Parameter]
    public string TxtYouHaveSelected { get; set; }
    [Parameter]
    public string TxtAmountToTokens { get; set; }
    [Parameter]
    public int AmountInStock { get; set; }
    [Parameter]
    public string BtnSearch { get; set; }
    [Parameter]
    public string ContactListPanelTitle { get; set; }
    [Parameter]
    public string PathApiValidTransfer { get; set; }
}

<div class="card-header">
    <h4>
        @TransferTypeFriendPanelTitle
    </h4>
</div>

<div class="card-body">
    @if (Page == 1)
    {
        <div class="form-group ">
            <EditForm Model="@this" OnValidSubmit="@GoSearchContact">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <label for="input-amount"> @LabelNumberOfTokensToSend</label>
                <input class="form-control col-lg-4 mb-3" type="number" min="10" max="@AmountInStock" step="10" @bind="@this.Amount" @bind:event="oninput" />                                                                                                                             <button class="btn btn-primary" type="submit">@BtnSelectSender</button>
                <button @onclick="(() => ClickCancel.InvokeAsync(true))" class="btn btn-danger">@BtnCancel</button>
            </EditForm>

        </div>
        <br />
    }
    else if (Page == 2)
    {
        <ContactList_Component TxtSelectContact="@TxtSelectContact" ContactListPanelTitle="@ContactListPanelTitle" BtnSearch="@BtnSearch" ListContact="ListContact" SetSelectedContact="GetContactSelected"></ContactList_Component>
    }
    else if (Page == 3 || Page == 4)
    {
        <br />
        <p>
            @String.Format(TxtAmountToTokens, Amount, SelectedContact.DisplayName)
        </p>

        if (Page == 4)
        {
            <Loading_Component Loading="Loading" />
            @if (!Loading)
            {
                <strong>@MessageValidatedTransfer </strong>
                <br />
                <button href="/" class="btn btn-primary mt-2">@BtnReturnDashboard</button>
            }
        }
        else
        {
            <button class="btn btn-success mb-4" @onclick="ConfirmTransfer">@BtnConfirmTransfer</button>
            <button @onclick="(() => ClickCancel.InvokeAsync(true))" class="btn btn-danger mb-4">@BtnCancel</button>
        }
    }
</div>